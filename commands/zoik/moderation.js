const { EmbedBuilder, PermissionsBitField } = require('discord.js');

module.exports = {
  name: 'moderation',
  run: async (client, message, args) => {
    if (message.author.id !== process.env.OWNER_ID)
      return message.reply('‚ùå L·ªánh n√†y ch·ªâ d√†nh cho ch·ªß bot.');

    const sub = args[0]?.toLowerCase();
    const member = message.mentions.members.first();
    const reason = args.slice(2).join(' ') || 'Kh√¥ng c√≥ l√Ω do.';

    if (!sub || !['ban', 'kick', 'mute'].includes(sub))
      return message.reply('‚ùì C√∫ ph√°p: `k!moderation <ban|kick|mute> @user <l√Ω do>`');

    if (!member) return message.reply('‚ö†Ô∏è Vui l√≤ng tag ng∆∞·ªùi c·∫ßn x·ª≠ l√Ω.');

    // Check role
    const botMember = message.guild.members.me;
    if (member.id === message.guild.ownerId)
      return message.reply('üö´ Kh√¥ng th·ªÉ x·ª≠ l√Ω ch·ªß server.');
    if (member.roles.highest.position >= botMember.roles.highest.position)
      return message.reply('‚ö†Ô∏è Kh√¥ng th·ªÉ x·ª≠ l√Ω ng∆∞·ªùi c√≥ vai tr√≤ cao b·∫±ng ho·∫∑c cao h∆°n bot.');

    try {
      if (sub === 'ban') {
        await member.ban({ reason });
      } else if (sub === 'kick') {
        await member.kick(reason);
      } else if (sub === 'mute') {
        if (!member.manageable || !member.moderatable)
          return message.reply('‚ùå Bot kh√¥ng th·ªÉ mute ng∆∞·ªùi n√†y.');

        await member.timeout(60 * 60 * 1000, reason); // 1h timeout
      }

      const embed = new EmbedBuilder()
        .setColor(0xff0000)
        .setTitle('üî® ƒê√£ x·ª≠ l√Ω th√†nh c√¥ng')
        .addFields(
          { name: 'üë§ Ng∆∞·ªùi b·ªã x·ª≠ l√Ω', value: `${member.user.tag} (${member.id})` },
          { name: 'üîß H√†nh ƒë·ªông', value: sub.toUpperCase(), inline: true },
          { name: 'üìÑ L√Ω do', value: reason, inline: true },
        )
        .setFooter({ text: `X·ª≠ l√Ω b·ªüi ${message.author.tag}` });

      const reply = await message.reply({ embeds: [embed] });
      setTimeout(() => {
        message.delete().catch(() => {});
        reply.delete().catch(() => {});
      }, 5000);
    } catch (err) {
      console.error(err);
      message.reply('‚ùå C√≥ l·ªói x·∫£y ra. Ki·ªÉm tra l·∫°i quy·ªÅn ho·∫∑c vai tr√≤.').then(m => {
        setTimeout(() => m.delete().catch(() => {}), 5000);
      });
    }
  }
};